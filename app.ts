import { Application, IBoot } from 'egg'
import * as fs from 'fs'
import * as path from 'path'
import * as LRU from 'lru-cache'
import { createBundleRenderer, BundleRenderer } from 'vue-server-renderer'
import { setupDevServer } from './app/web/build/setup-dev-server'

const isProd: boolean = process.env.NODE_ENV === 'production'

export default class FooBoot implements IBoot {
  private readonly app: Application
  constructor (app: Application) {
    this.app = app
  }
  configWillLoad () {
    // Ready to call configDidLoad,
    // Config, plugin files are referred,
    // this is the last chance to modify the config.
  }
  configDidLoad () {
    // Config, plugin files have loaded.
  }
  async didLoad () {
    // All files have loaded, start plugin here.
    await this.createRenderer()
  }
  async willReady () {
    // All plugins have started, can do some thing before app ready.
  }
  async didReady () {
    // Worker is ready, can do some things
    // don't need to block the app boot.
  }
  async serverDidReady () {
    // Server is listening.
  }
  async beforeClose () {
    // Do some thing before app close.
  }
  /**
   * @description 创建 renderer
   * @memberof FooBoot
   */
  async createRenderer () {
    const { app } = this
    let createRenderer = (bundle, options): BundleRenderer => {
      // https://github.com/vuejs/vue/blob/dev/packages/vue-server-renderer/README.md#why-use-bundlerenderer
      return createBundleRenderer(bundle, Object.assign(options, {
        // for component caching
        cache: new LRU({
          max: 1000,
          maxAge: 1000 * 60 * 15
        }),
        // recommended for performance
        runInNewContext: false
      }))
    }
    const templatePath: string = path.resolve('app/web/index.html')
    if (isProd) {
      // In production: create server renderer using template and built server bundle.
      // The server bundle is generated by vue-ssr-webpack-plugin.
      const template = fs.readFileSync(templatePath, 'utf-8')
      const bundle = require(path.resolve('app/public/index/vue-ssr-server-bundle.json'))
      // The client manifests are optional, but it allows the renderer
      // to automatically infer preload/prefetch links and directly add <script>
      // tags for any async chunks used during render, avoiding waterfall requests.
      const clientManifest = require(path.resolve('app/public/index/vue-ssr-client-manifest.json'))
      app.context.renderer = createRenderer(bundle, {
        template,
        clientManifest
      })
    } else {
      // In development: setup the dev server with watch and hot-reload,
      // and create a new renderer on bundle / index template update.
      console.time('setupDevServer')
      await setupDevServer(
        app,
        templatePath,
        (bundle, options) => {
          app.context.renderer = createRenderer(bundle, options)
        }
      )
      console.timeEnd('setupDevServer')
    }
  }
}
