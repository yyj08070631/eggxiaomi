import { Application } from 'egg'
import * as fs from 'fs'
import * as path from 'path'
import * as webpack from 'webpack'
import * as MFS from 'memory-fs'
import * as chokidar from 'chokidar'
import { cloneDeep } from 'lodash'
import clientConfigBase from './webpack.client.config'
import serverConfigBase from './webpack.server.config'
import * as webpackDevMiddleware from 'koa-webpack-dev-middleware'
import * as webpackHotMiddleware from 'koa-webpack-hot-middleware'

export function setupDevServer (app: Application, templatePath: string, cb: Function) {
  let clientConfig = cloneDeep(clientConfigBase)
  let serverConfig = cloneDeep(serverConfigBase)
  const readFile = (fs, file: string) => {
    try {
      return fs.readFileSync(path.join(clientConfig.output.path, file), 'utf-8')
    } catch (e) {
      // do sth...
    }
  }
  let bundle
  let template
  let clientManifest

  let ready: Function
  const readyPromise = new Promise(r => { ready = r })
  const update = () => {
    if (bundle && clientManifest) {
      ready()
      cb(bundle, {
        template,
        clientManifest
      })
    }
  }

  // read template from disk and watch
  template = fs.readFileSync(templatePath, 'utf-8')
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8')
    console.log('index.html template updated.')
    update()
  })

  // modify client config to work with hot middleware
  clientConfig.entry = ['webpack-hot-middleware/client', clientConfig.entry]
  clientConfig.output.filename = '[name].js'
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  )

  // dev middleware
  const clientCompiler = webpack(clientConfig)
  const devMiddleware = webpackDevMiddleware(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true,
    quiet: true
  })
  app.use(devMiddleware)
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson()
    // stats.errors.forEach(err => console.error(err))
    // stats.warnings.forEach(err => console.warn(err))
    if (stats.errors.length) return
    clientManifest = JSON.parse(readFile(
      devMiddleware.fileSystem,
      'vue-ssr-client-manifest.json'
    ))
    update()
  })

  // hot middleware
  app.use(webpackHotMiddleware(clientCompiler, { heartbeat: 5000 }))

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig)
  const mfs = new MFS()
  serverCompiler.outputFileSystem = mfs
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err
    if (stats.toJson().errors.length) return

    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(mfs, 'vue-ssr-server-bundle.json'))
    update()
  })

  return readyPromise
}
